#summary Casos de Teste da lista Registros
= Funções =

A lista REGISTROS é constituida de dezenove funções:

  * void Ponto::Atribuir(x, y)
    - Atribui ao ponto os valores _x_ e _y_ do plano cartesiano.
  * float Ponto::Distancia(p)
    - Retorna a distancia entre _p_ e o ponto corrente.
  * float Triangulo::Perimetro()
    - Retorna a soma dos lados do triangulo corrente.
  * float Triangulo::Area()
    - Retorna a área do triângulo corrente.
  * bool Triangulo::Equilatero()
    - Testa se o triangulo em questão é equilátero ou não.
  * bool Triangulo::Semelhante(T)
    - Testa se o triangulo _T_ é semelhante ao triângulo corrente.
  * float Retangulo::Perimetro()
    - Retorna a soma dos lados do retângulo corrente.
  * float Retangulo::Area()
    - Retorna a área do retângulo corrente.
  * bool Retangulo::Quadrado()
    - Testa se o retângulo em questão se trata também de um quadrado.
  * bool Retangulo::Contem(P)
    - Testa se o ponto _P_ está dentro do retângulo em questão.
  * bool Retangulo::Contem(T)
    - Testa se o triangulo _T_ está dentro do retângulo em questão.
  * float Circunferencia::Perimetro()
    - Retorna o valor do comprimento da circunferência em questão
  * float Circunferencia::Area()
    - Retorna o valor da área da circunferência em questão
  * bool Circunferencia::Contem(P)
    - Testa se o ponto _P_ está dentro da circunferência corrente.
  * bool Circunferencia::Contem(T)
    - Testa se o triangulo _T_ está dentro da circunferência corrente.
  * bool Circunferencia::Contem(R)
    - Testa se o retangulo _R_ está dentro da circunferência corrente.
  * bool Circunferencia::Pertence(P)
    - Testa se o ponto _P_ está no contorno da circunferência corrente.
  * bool Circunferencia::Circunscrita(T)
    - Testa se a circunferência corrente é circunscrita ao triângulo _T_.
  * bool Circunferencia::Circunscrita(R)
    - Testa se a circunferência corrente é circunscrita ao retângulo _R_.

= Casos de Teste =

Para criação do corretor desta lista de exercícios foram levadas em conta
varias entradas diferentes, com o intuito de cobrir todos os erros possíveis de serem ocorridos. Os casos de teste analisados são os seguintes:

- *void Ponto::Atribuir(x, y)*
  * Estrutura Ponto sem informações armazenadas
  * Estrutura Ponto com informações armazenadas anteriormente
- *float Ponto::Distancia(P)*
  * Pontos no mesmo lugar
  * Pontos em uma mesma reta horizontal
  * Pontos em uma mesma reta vertical
  * Pontos em qualquer lugar do Plano Cartesiano
- *float Triangulo::Perimetro()*
  * Coordenadas Positivas
  * Coordenadas Positivas e Negativas
- *float Triangulo::Area()*
  * Triângulo Agudo
  * Triângulo Reto
  * triângulo Obtuso
- *bool Triangulo::Equilatero()*
  * Triângulo não equilátero
  * triângulo equilátero
- *bool Triangulo::Semelhante(T)*
  * Triângulo não semelhantes
  * Triângulos semelhantes e na mesma posição
  * Triângulos semelhantes, mas virados, um em relação ao outro
- *float Retangulo::Perimetro()*
  * Retângulos variados
- *float Retangulo::Area()*
  * Retângulos variados
- *bool Retangulo::Quadrado()*
  * Retângulo quadrado
  * Retângulo não quadrado
- *bool Retangulo::Contem(P)*
  * Ponto _P_ dentro do retângulo
  * Ponto _P_ nos limites do retângulo
  * Ponto _P_ fora do retângulo
- *bool Retangulo::Contem(T)*
  * Triangulo _T_ dentro do retângulo
  * Triângulo _T_ com dois pontos dentro do retângulo
  * Triangulo _T_ com apenas um ponto dentro do retângulo
  * Triângulo _T_ fora do retângulo
- *float Circunferencia::Perimetro()*
  * Raio inteiro
  * Raio não inteiro
  * Raio muito pequeno
- *float Circunferencia::Area()*
  * Raio inteiro
  * Raio não inteiro
  * Raio muito pequeno
- *bool Circunferencia::Contem(P)*
  * Ponto dentro da circunferência
  * Ponto nos limites da circunferência
  * Ponto fora da circunferência
- *bool Circunferencia::Contem(T)*
  * Triangulo _T_ dentro da circunferência
  * Triângulo _T_ com dois pontos dentro da circunferência
  * Triângulo _T_ com apenas um ponto dentro da circunferência
  * Triangulo _T_ fora da circunferência
- *bool Circunferencia::Contem(R)*
  * Retângulo _R_ dentro da circunferência
  * Retângulo _R_ com três pontos dentro da circunferência
  * Retângulo _R_ com dois pontos dentro da circunferência
  * Retângulo _R_ com apenas um ponto dentro da circunferência
  * Retângulo _R_ fora da circunferência
- *bool Circunferencia::Pertence(P)*
  * Ponto _P_ pertencente à circunferência
  * Ponto _P_ dentro da circunferência
  * Ponto _P_ fora da circunferência
- *bool Circunferencia::Circunscrita(T)*
  * Triângulo _T_ inscrito à circunferência
  * Triângulo _T_ com um ponto encostando a circunferência
  * Triângulo _T_ com dois pontos encostando a circunferência
  * Triângulo _T_ dentro da circunferência
- *bool Circunferencia::Circunscrita(R)*
  * Retângulo _R_ inscrito à circunferência
  * Retângulo _R_ com um ponto encostando na circunferência
  * Retângulo _R_ com dois pontos encostando na circunferência
  * Retângulo _R_ dentro da Circunferência