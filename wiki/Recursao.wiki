#summary Casos de Teste da lista Recursão
= Funções =

A lista RECURSÃO é constituida de onze funções:

  * int Fat(n)
    - Retorna o fatorial de _n_.
  * int Pow(k, n)
    - Retorna o valor de _k_ elevado a _n_.
  * int Mdc(a, b)
    - Retorna o mdc entre _a_ e _b_.
  * int Mdc3(a, b, c)
    - Retorna o mdc entre _a_, _b_ e _c_.
  * int Mmc(a, b)
    - Retorna o mmc entre _a_ e _b_.
  * int Fib(n)
    - Retorna o enésimo termo da série de Fibonacci.
  * int Resto(a, b)
    - Retorna o resto da divisão de _a_ por _b_.
  * int Div(a, b)
    - Retorna o resultado da divisão inteira de _a_ por _b_.
  * int Dig(n)
    - Retorna a soma dos algarismos de n.
  * bool Primo(n)
    - Retorna _true_ se _n_ for primo e _false_ caso contrário.
  * double Sqrt(a)
    - Retorna a raíz quadrada de _a_.

= Casos de Teste =

Para criação do corretor desta lista de exercícios foram levadas em conta
varias entradas diferentes, com o intuito de cobrir todos os erros possíveis de serem ocorridos. Os casos de teste analisados são os seguintes:

- *int Fat(n)*
  * Fatorial de 0
  * Fatorial de 1
  * Fatorial de _n_ qualquer
- *int Pow(k, n)*
  * Expoente igual a 0
  * Base negativa com expoente par
  * Base negativa com expoente ímpar
  * Base positiva com expoente não nulo
- *int Mdc(a, b)*
  * _a_ e _b_ iguais
  * _a_ e _b_ proporcionais
  * _a_ e _b_ primos
  * _a_ e _b_ quaisquer
- *int Mdc3(a, b, c)*
  * _a_, _b_ e _c_ iguais
  * _a_ e _b_ iguais e _c_ proporcional a eles
  * _a_, _b_ e _c_ primos
  * _a_ primo, _b_ e _c_ com divisor comum
- *int Mmc(a, b)*
  * _a_ e _b_ iguais
  * _a_ e _b_ proporcionais
  * _a_ igual a 1
  * _a_ e _b_ quaisquer
- *int Fib(n)*
  * _n_ igual a 0
  * _n_ igual a 1
  * _n_ qualquer
- *int Resto(a, b)*
  * _a_ menor que _b_
  * _a_ igual a _b_
  * _a_ proporcional a _b_
  * _a_ maior que _b_
- *int Div(a, b)*
  * _a_ menor que _b_
  * _a_ igual a _b_
  * _a_ proporcional a _b_
  * _a_ maior que _b_
- *int Dig(n)*
  * _n_ igual a 0
  * _n_ menor que 10
  * _n_ maior que 10 e menor que 100
  * _n_ maior que 100
- *bool Primo(n)*
  * _n_ igual a 1
  * _n_ primo
  * _n_ não primo
- *double Sqrt(n)*
  * _n_ igual a 0
  * _n_ igual a 1
  * _n_ sendo um quadrado perfeito
  * _n_ inteiro não sendo um quadrado perfeito
  * _n_ não inteiro e não sendo quadrado perfeito